@page "/branch-info"
@page "/branch-info/{Id}"
@rendermode InteractiveServer
@using BlazorApp1.Components.Models
@using BlazorApp1.Components.Services
@using BlazorApp1.Components.Shared
@inject NavigationManager NavigationManager
@inject IBankService BankService
@inject ILogger<BranchInfo> Logger

<Notifications @ref="notifications" />


<div class="row">
    <div class="col">
        <h3>@(BranchId == null ? "Add New Branch" : "Edit Branch")</h3>
    </div>
</div>
<EditForm Model="@formModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label>Branch Name</label>
                <InputText @bind-Value="formModel.BranchName" class="form-control" />
                <ValidationMessage For="@(() => formModel.BranchName)" />
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group mb-3">
                <label>Branch Code</label>
                <InputText @bind-Value="formModel.BranchCode" class="form-control" />
                <ValidationMessage For="@(() => formModel.BranchCode)" />
            </div>
        </div>
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary me-2">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string? BranchId { get; set; }
    [Parameter]
    public string? BankId { get; set; }
    [Parameter]
    public EventCallback OnSaved { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }

    private BankBranchModel formModel = new();
    private Notifications? notifications;


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(BranchId))
        {
            formModel = await BankService.GetBankBranchAsync(BranchId);
        }
        else if (!string.IsNullOrEmpty(BankId))
        {
            formModel.BankNo = BankId;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            formModel.BankNo = BankId ?? "0";
            await BankService.SaveBankBranchAsync(formModel);
            await OnSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save branch");
            throw;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"bank-info/{BankId}?activeTab=branches");
    }
}
