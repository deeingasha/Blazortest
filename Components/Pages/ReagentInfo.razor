@page "/reagent-info"
@page "/reagent-info/{Id}"
@rendermode InteractiveServer
@using BlazorApp1.Components.Models
@using BlazorApp1.Components.Services
@inject NavigationManager NavigationManager
@inject IReagentService ReagentService
@inject ILogger<ReagentInfo> Logger

<h3>@(Id == null ? "New Reagent" : "Edit Reagent")</h3>

<EditForm Model="@formModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label>Reagent Name</label>
                <InputText @bind-Value="formModel.Reagent_Name" class="form-control" />
                <ValidationMessage For="@(() => formModel.Reagent_Name)" />
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group mb-3">
                <label>Reorder Level</label>
                <InputText @bind-Value="formModel.Reorder_Level" class="form-control" />
                <ValidationMessage For="@(() => formModel.Reorder_Level)" />
            </div>
        </div>

        <div class="col-12">
            <div class="form-group mb-3">
                <label>Description</label>
                <InputTextArea @bind-Value="formModel.Description" class="form-control" rows="3" />
                <ValidationMessage For="@(() => formModel.Description)" />
            </div>
        </div>
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string? Id { get; set; }

    private ReagentModel formModel = new();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var reagent = await ReagentService.GetReagentAsync(Id);
            if (reagent != null)
            {
                formModel = reagent;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await ReagentService.SaveReagentAsync(formModel);
            NavigateBack();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save reagent");
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("reagents");
    }
}
